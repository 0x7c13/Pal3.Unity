#if PAL3

// ---------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by ConsoleCommandsAutoGen`1
// </auto-generated>
// ---------------------------------------------------------------------------------------------

namespace Pal3.Game.Command
{
    using Core.Command;
    using Core.Command.SceCommands;
    using Extensions;
    using IngameDebugConsole;

    // <auto-generated/>
    public static class ConsoleCommands
    {
        // <auto-generated/>
        [ConsoleMethodAttribute("ActorSetFacing", "Execute ActorSetFacingCommand.")]
        public static void ActorSetFacing(System.Int32 actorId, System.Int32 degrees)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorSetFacingCommand(actorId, degrees));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorSetWorldPosition", "Execute ActorSetWorldPositionCommand.")]
        public static void ActorSetWorldPosition(System.Int32 actorId, System.Single xPosition, System.Single zPosition)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorSetWorldPositionCommand(actorId, xPosition, zPosition));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraSetInitialStateOnNextSceneLoad", "Execute CameraSetInitialStateOnNextSceneLoadCommand.")]
        public static void CameraSetInitialStateOnNextSceneLoad(System.Single xEulerAngle, System.Single yEulerAngle, System.Single zEulerAngle, System.Int32 initTransformOption)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraSetInitialStateOnNextSceneLoadCommand(xEulerAngle, yEulerAngle, zEulerAngle, initTransformOption));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("PlayerActorLookAtSceneObject", "Execute PlayerActorLookAtSceneObjectCommand.")]
        public static void PlayerActorLookAtSceneObject(System.Int32 sceneObjectId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new PlayerActorLookAtSceneObjectCommand(sceneObjectId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("PlayerInteractionRequest", "Execute PlayerInteractionRequest.")]
        public static void PlayerInteractionRequest()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new PlayerInteractionRequest());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ResetGameState", "Execute ResetGameStateCommand.")]
        public static void ResetGameState()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ResetGameStateCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("SceneSaveGlobalBidirectionalPushableObjectState", "Execute SceneSaveGlobalBidirectionalPushableObjectStateCommand.")]
        public static void SceneSaveGlobalBidirectionalPushableObjectState(System.String cityName, System.String sceneName, System.Int32 objectId, System.Int32 state)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new SceneSaveGlobalBidirectionalPushableObjectStateCommand(cityName, sceneName, objectId, state));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("SceneSaveGlobalObjectActivationState", "Execute SceneSaveGlobalObjectActivationStateCommand.")]
        public static void SceneSaveGlobalObjectActivationState(System.String cityName, System.String sceneName, System.Int32 objectId, System.Boolean isActivated)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new SceneSaveGlobalObjectActivationStateCommand(cityName, sceneName, objectId, isActivated));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("SceneSaveGlobalObjectLayerIndex", "Execute SceneSaveGlobalObjectLayerIndexCommand.")]
        public static void SceneSaveGlobalObjectLayerIndex(System.String cityName, System.String sceneName, System.Int32 objectId, System.Byte layerIndex)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new SceneSaveGlobalObjectLayerIndexCommand(cityName, sceneName, objectId, layerIndex));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("SceneSaveGlobalObjectPosition", "Execute SceneSaveGlobalObjectPositionCommand.")]
        public static void SceneSaveGlobalObjectPosition(System.String cityName, System.String sceneName, System.Int32 objectId, System.Single gameBoxXPosition, System.Single gameBoxYPosition, System.Single gameBoxZPosition)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new SceneSaveGlobalObjectPositionCommand(cityName, sceneName, objectId, gameBoxXPosition, gameBoxYPosition, gameBoxZPosition));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("SceneSaveGlobalObjectSwitchState", "Execute SceneSaveGlobalObjectSwitchStateCommand.")]
        public static void SceneSaveGlobalObjectSwitchState(System.String cityName, System.String sceneName, System.Int32 objectId, System.Byte switchState)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new SceneSaveGlobalObjectSwitchStateCommand(cityName, sceneName, objectId, switchState));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("SceneSaveGlobalObjectTimesCount", "Execute SceneSaveGlobalObjectTimesCountCommand.")]
        public static void SceneSaveGlobalObjectTimesCount(System.String cityName, System.String sceneName, System.Int32 objectId, System.Byte timesCount)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new SceneSaveGlobalObjectTimesCountCommand(cityName, sceneName, objectId, timesCount));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("SceneSaveGlobalObjectYRotation", "Execute SceneSaveGlobalObjectYRotationCommand.")]
        public static void SceneSaveGlobalObjectYRotation(System.String cityName, System.String sceneName, System.Int32 objectId, System.Single gameBoxYRotation)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new SceneSaveGlobalObjectYRotationCommand(cityName, sceneName, objectId, gameBoxYRotation));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("SwitchPlayerActorRequest", "Execute SwitchPlayerActorRequest.")]
        public static void SwitchPlayerActorRequest()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new SwitchPlayerActorRequest());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ToggleMainMenuRequest", "Execute ToggleMainMenuRequest.")]
        public static void ToggleMainMenuRequest()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ToggleMainMenuRequest());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ToggleWorldMapRequest", "Execute ToggleWorldMapRequest.")]
        public static void ToggleWorldMapRequest()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ToggleWorldMapRequest());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorActivate", "设置角色是否激活，参数：角色ID，是否激活（1是0否）")]
        public static void ActorActivate(System.Int32 actorId, System.Int32 isActive)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorActivateCommand(actorId, isActive));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorAddSkill", "某个主角学会新特技，参数：主角ID，特技ID")]
        public static void ActorAddSkill(System.Int32 actorId, System.Int32 skillId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorAddSkillCommand(actorId, skillId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorAutoStand", "指定角色是否在PerformAction指令完成后自动切换成站立的动作，参数：角色ID，是否自动站立（1是0否）")]
        public static void ActorAutoStand(System.Int32 actorId, System.Int32 autoStand)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorAutoStandCommand(actorId, autoStand));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorChangeColliderSetting", "设置某个角色是否可以重叠（关闭碰撞）,参数：角色ID，是否可重叠(1可0不可)")]
        public static void ActorChangeColliderSetting(System.Int32 actorId, System.Int32 disableCollider)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorChangeColliderSettingCommand(actorId, disableCollider));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorChangeScale", "指定角色的缩放系数，参数：角色ID，缩放系数")]
        public static void ActorChangeScale(System.Int32 actorId, System.Single scale)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorChangeScaleCommand(actorId, scale));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorChangeTexture", "给角色更换纹理贴图参数：角色ID，贴图名")]
        public static void ActorChangeTexture(System.Int32 actorId, System.String textureName)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorChangeTextureCommand(actorId, textureName));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorEnablePlayerControl", "设置玩家控制哪个主角，参数：主角ID")]
        public static void ActorEnablePlayerControl(System.Int32 actorId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorEnablePlayerControlCommand(actorId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorFadeIn", "角色淡入")]
        public static void ActorFadeIn(System.Int32 actorId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorFadeInCommand(actorId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorFadeOut", "角色淡出")]
        public static void ActorFadeOut(System.Int32 actorId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorFadeOutCommand(actorId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorLearnCompose", "选择同伴学会合成术，参数：合成出的物品的数据库ID")]
        public static void ActorLearnCompose(System.Int32 objectId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorLearnComposeCommand(objectId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorLoadAction", "使角色加载一个动作，参数：角色ID，动作编号")]
        public static void ActorLoadAction(System.Int32 actorId, System.String actionName)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorLoadActionCommand(actorId, actionName));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorLookAtActor", "设定一个角色面向另一个角色（的位置），参数：被设置的角色的ID，面向的角色的ID")]
        public static void ActorLookAtActor(System.Int32 actorId, System.Int32 lookAtActorId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorLookAtActorCommand(actorId, lookAtActorId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorMoveBackwards", "角色向后平移，参数：角色ID，距离（原GameBox引擎下的距离单位）")]
        public static void ActorMoveBackwards(System.Int32 actorId, System.Single gameBoxDistance)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorMoveBackwardsCommand(actorId, gameBoxDistance));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorMoveOutOfScreen", "使角色向指定位置走,直到走出屏幕（不一定走到指定的点），参数：角色ID，TileMap中X坐标，TileMap中Y坐标，运动模式（0走，1跑）")]
        public static void ActorMoveOutOfScreen(System.Int32 actorId, System.Int32 tileXPosition, System.Int32 tileYPosition, System.Int32 mode)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorMoveOutOfScreenCommand(actorId, tileXPosition, tileYPosition, mode));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorMoveTo", "查找一个到TileMap上（X，Y）的路径，并使角色按此路径移动，移动中使用指定动作参数：角色ID，TileMap中X坐标，TileMap中Y坐标，动作类型（0走，1跑，2后退）")]
        public static void ActorMoveTo(System.Int32 actorId, System.Int32 tileXPosition, System.Int32 tileYPosition, System.Int32 mode)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorMoveToCommand(actorId, tileXPosition, tileYPosition, mode));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorPathTo", "查找一个到TileMap上（X，Y）的路径，并使角色按此路径移动，参数：角色ID，TileMap中X坐标，TileMap中Y坐标，运动模式（0走，1跑，2后退）")]
        public static void ActorPathTo(System.Int32 actorId, System.Int32 tileXPosition, System.Int32 tileYPosition, System.Int32 mode)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorPathToCommand(actorId, tileXPosition, tileYPosition, mode));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorPerformAction", "使角色执行一个动作，参数：角色ID，动作编号，播放次数（-1表示一直循环播放,-2表示播放一次后保持）")]
        public static void ActorPerformAction(System.Int32 actorId, System.String actionName, System.Int32 loopCount)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorPerformActionCommand(actorId, actionName, loopCount));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorPerformClimbAction", "使当前玩家操纵角色攀爬场景物品，参数：场景物品ID，向上或向下（1上0下）")]
        public static void ActorPerformClimbAction(System.Int32 objectId, System.Int32 climbUp)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorPerformClimbActionCommand(objectId, climbUp));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorRotateFacing", "转动角色面向的方向，参数：角色ID，转过多少角度（-360~360）")]
        public static void ActorRotateFacing(System.Int32 actorId, System.Int32 degrees)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorRotateFacingCommand(actorId, degrees));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorRotateFacingDirection", "转动角色的方向，参数：ID，方向（方向值为0-7）")]
        public static void ActorRotateFacingDirection(System.Int32 actorId, System.Int32 direction)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorRotateFacingDirectionCommand(actorId, direction));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorSetAttributeValue", "设置角色属性值参数：属性值ID，属性值类型，数值")]
        public static void ActorSetAttributeValue(System.Int32 attributeId, System.Int32 attributeType, System.Int32 value)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorSetAttributeValueCommand(attributeId, attributeType, value));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorSetFacingDirection", "瞬间使角色面向的方向改变，参数：角色ID，方向（方向值为0-7）")]
        public static void ActorSetFacingDirection(System.Int32 actorId, System.Int32 direction)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorSetFacingDirectionCommand(actorId, direction));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorSetNavLayer", "设置角色所在的地层，参数：ID，层数（0或1）")]
        public static void ActorSetNavLayer(System.Int32 actorId, System.Int32 layerIndex)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorSetNavLayerCommand(actorId, layerIndex));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorSetScript", "设置角色的对话脚本，参数：角色ID，脚本ID")]
        public static void ActorSetScript(System.Int32 actorId, System.Int32 scriptId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorSetScriptCommand(actorId, scriptId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorSetTilePosition", "瞬间移动角色到TileMap中该点，参数：角色ID，TileMap中X坐标，TileMap中Y坐标")]
        public static void ActorSetTilePosition(System.Int32 actorId, System.Int32 tileXPosition, System.Int32 tileYPosition)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorSetTilePositionCommand(actorId, tileXPosition, tileYPosition));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorSetYPosition", "给角色设置Y坐标参数：角色ID，Y坐标（原GameBox引擎下的Y坐标单位）")]
        public static void ActorSetYPosition(System.Int32 actorId, System.Single gameBoxYPosition)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorSetYPositionCommand(actorId, gameBoxYPosition));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorShowEmoji", "在角色头顶出现表情符号，参数：角色ID，表情编号ID")]
        public static void ActorShowEmoji(System.Int32 actorId, System.Int32 emojiId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorShowEmojiCommand(actorId, emojiId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorStopActionAndStand", "使角色结束当前行为，并站立在当前位置，参数：角色ID")]
        public static void ActorStopActionAndStand(System.Int32 actorId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorStopActionAndStandCommand(actorId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorStopAction", "ActorPerformActionCommand的循环次数为-1或-2时需要用此命令结束，参数：角色ID")]
        public static void ActorStopAction(System.Int32 actorId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorStopActionCommand(actorId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraFadeIn", "屏幕淡入")]
        public static void CameraFadeIn()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraFadeInCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraFadeInWhite", "屏幕淡入(白色）")]
        public static void CameraFadeInWhite()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraFadeInWhiteCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraFadeOut", "屏幕淡出")]
        public static void CameraFadeOut()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraFadeOutCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraFadeOutWhite", "屏幕淡出（白色）")]
        public static void CameraFadeOutWhite()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraFadeOutWhiteCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraFocusOnActor", "设置摄像机锁定角色，参数：角色ID")]
        public static void CameraFocusOnActor(System.Int32 actorId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraFocusOnActorCommand(actorId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraFocusOnPosition", "设置摄像机视角锁定一个定点，参数：原GameBox引擎下的一个三维坐标（X，Y，Z）")]
        public static void CameraFocusOnPosition(System.Single gameBoxXPosition, System.Single gameBoxYPosition, System.Single gameBoxZPosition)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraFocusOnPositionCommand(gameBoxXPosition, gameBoxYPosition, gameBoxZPosition));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraFocusOnSceneObject", "设置摄像机锁定场景物品，参数：物品ID")]
        public static void CameraFocusOnSceneObject(System.Int32 sceneObjectId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraFocusOnSceneObjectCommand(sceneObjectId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraFollowPlayer", "镜头是否锁定并跟随在主角身上，参数：1锁定并跟随，0解锁")]
        public static void CameraFollowPlayer(System.Int32 follow)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraFollowPlayerCommand(follow));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraMove", "镜头当前位置移动（保持当前角度），参数：原GameBox引擎下的一个三维坐标（X，Y，Z），动作时间，插值类型")]
        public static void CameraMove(System.Single gameBoxXPosition, System.Single gameBoxYPosition, System.Single gameBoxZPosition, System.Single duration, System.Int32 curveType)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraMoveCommand(gameBoxXPosition, gameBoxYPosition, gameBoxZPosition, duration, curveType));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraOrbit", "镜头环绕LookAt位置旋转（LookAt点固定），参数：目标Yaw，Pitch，运动时间，插值类型（0：Linear，1：Sine）")]
        public static void CameraOrbit(System.Single yaw, System.Single pitch, System.Single duration, System.Int32 curveType)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraOrbitCommand(yaw, pitch, duration, curveType));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraOrbitHorizontal", "镜头朝向固定点左右Orbit参数：目标Yaw，Pitch，目标镜头距离（原GameBox引擎下的距离单位），运动时间，插值类型（0：Linear，1：Sine），同步（1暂停当前脚本运行，0异步进行动画且继续执行脚本）")]
        public static void CameraOrbitHorizontal(System.Single yaw, System.Single pitch, System.Single gameBoxDistance, System.Single duration, System.Int32 curveType, System.Int32 synchronous)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraOrbitHorizontalCommand(yaw, pitch, gameBoxDistance, duration, curveType, synchronous));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraOrbitVertical", "镜头朝向固定点上下Orbit参数：目标Yaw，Pitch，目标镜头距离（原GameBox引擎下的距离单位），运动时间，插值类型（0：Linear，1：Sine），同步（1暂停当前脚本运行，0异步进行动画且继续执行脚本）")]
        public static void CameraOrbitVertical(System.Single yaw, System.Single pitch, System.Single gameBoxDistance, System.Single duration, System.Int32 curveType, System.Int32 synchronous)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraOrbitVerticalCommand(yaw, pitch, gameBoxDistance, duration, curveType, synchronous));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraPopState", "取出镜头状态")]
        public static void CameraPopState()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraPopStateCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraPush", "镜头推动作，参数：最后from与lookAt之间的距离（原GameBox引擎下的距离单位），动作时间，插值类型（0：Linear，1：Sine）")]
        public static void CameraPush(System.Single gameBoxDistance, System.Single duration, System.Int32 curveType)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraPushCommand(gameBoxDistance, duration, curveType));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraPushState", "保存镜头状态")]
        public static void CameraPushState()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraPushStateCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraRotate", "镜头摇动（from点固定），参数：目标Yaw，Pitch，运动时间，插值类型（0：Linear，1：Sine）")]
        public static void CameraRotate(System.Single yaw, System.Single pitch, System.Single duration, System.Int32 curveType)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraRotateCommand(yaw, pitch, duration, curveType));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraSetDefaultTransform", "调用默认镜头参数，参数：镜头参数ID")]
        public static void CameraSetDefaultTransform(System.Int32 option)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraSetDefaultTransformCommand(option));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraSetTransform", "设置镜头参数，参数：Yaw，Pitch，Distance（原GameBox引擎下的距离单位），原GameBox引擎下的一个三维坐标（X，Y，Z）")]
        public static void CameraSetTransform(System.Single yaw, System.Single pitch, System.Single gameBoxDistance, System.Single gameBoxXPosition, System.Single gameBoxYPosition, System.Single gameBoxZPosition)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraSetTransformCommand(yaw, pitch, gameBoxDistance, gameBoxXPosition, gameBoxYPosition, gameBoxZPosition));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraSetYaw", "相机设置Yaw角度")]
        public static void CameraSetYaw(System.Single yaw)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraSetYawCommand(yaw));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraShakeEffect", "摇晃镜头（模拟地震）效果，参数：持续时间，振幅")]
        public static void CameraShakeEffect(System.Single duration, System.Single amplitude)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraShakeEffectCommand(duration, amplitude));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CombatEnterBossFight", "进入Boss战")]
        public static void CombatEnterBossFight(System.UInt32 monster1Id, System.UInt32 monster2Id, System.UInt32 monster3Id, System.UInt32 monster4Id, System.UInt32 monster5Id, System.UInt32 monster6Id)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CombatEnterBossFightCommand(monster1Id, monster2Id, monster3Id, monster4Id, monster5Id, monster6Id));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CombatEnterNormalFight", "进入普通战斗")]
        public static void CombatEnterNormalFight(System.UInt32 numberOfMonster, System.UInt32 monster1Id, System.UInt32 monster2Id, System.UInt32 monster3Id)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CombatEnterNormalFightCommand(numberOfMonster, monster1Id, monster2Id, monster3Id));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CombatSetMaxRound", "设置战斗的最大回合数")]
        public static void CombatSetMaxRound(System.Int32 maxRound)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CombatSetMaxRoundCommand(maxRound));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CombatSetNoGameOverWhenLose", "设置战斗失败不显示结束游戏")]
        public static void CombatSetNoGameOverWhenLose()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CombatSetNoGameOverWhenLoseCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CombatSetUnbeatable", "设置战斗为必败")]
        public static void CombatSetUnbeatable()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CombatSetUnbeatableCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("DialogueRenderActorAvatar", "渲染人物头像立绘，参数：角色ID，头像图片编号，问或答（0头像在左，1头像在右）")]
        public static void DialogueRenderActorAvatar(System.Int32 actorId, System.String avatarTextureName, System.Int32 rightAligned)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new DialogueRenderActorAvatarCommand(actorId, avatarTextureName, rightAligned));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("DialogueRenderText", "显示对话，等待用户确定后脚本继续")]
        public static void DialogueRenderText(System.String dialogueText)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new DialogueRenderTextCommand(dialogueText));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("DialogueRenderTextWithTimeLimit", "显示对话，等待用户确定后或者时间结束时脚本继续")]
        public static void DialogueRenderTextWithTimeLimit(System.String dialogueText)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new DialogueRenderTextWithTimeLimitCommand(dialogueText));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("EffectAttachToActor", "在角色位置播放特效，参数：角色ID")]
        public static void EffectAttachToActor(System.Int32 actorId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new EffectAttachToActorCommand(actorId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("EffectPlay", "播放VFX特效，参数：VFX特效GroupID")]
        public static void EffectPlay(System.Int32 effectGroupId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new EffectPlayCommand(effectGroupId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("EffectPreLoad", "预加载VFX特效Group，参数：VFX特效GroupID")]
        public static void EffectPreLoad(System.Int32 effectGroupId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new EffectPreLoadCommand(effectGroupId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("EffectSetPosition", "设置VFX特效位置，参数：原GameBox引擎下的一个三维坐标（X，Y，Z）")]
        public static void EffectSetPosition(System.Single gameBoxXPosition, System.Single gameBoxYPosition, System.Single gameBoxZPosition)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new EffectSetPositionCommand(gameBoxXPosition, gameBoxYPosition, gameBoxZPosition));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("EffectSetScreenEffect", "设置全局镜头（屏幕）特效，参数：特效模式（-1清除所有特效，0水下效果，1黑白色阶）")]
        public static void EffectSetScreenEffect(System.Int32 mode)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new EffectSetScreenEffectCommand(mode));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("EffectShowSnow", "开启下雪特效，参数：0关闭，1开启")]
        public static void EffectShowSnow(System.Int32 active)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new EffectShowSnowCommand(active));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("EffectShowWaterMagic", "在玩家角色周身渲染水特效，参数：0关闭，1开启")]
        public static void EffectShowWaterMagic(System.Int32 active)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new EffectShowWaterMagicCommand(active));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("FavorAdd", "增减好感增，参数：角色ID，增减值")]
        public static void FavorAdd(System.Int32 actorId, System.Int32 changeAmount)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new FavorAddCommand(actorId, changeAmount));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("FeatureEnableJusticeBook", "打开或关闭降妖谱功能，参数：0关闭，1打开")]
        public static void FeatureEnableJusticeBook(System.Int32 enable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new FeatureEnableJusticeBookCommand(enable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("FeatureEnableSwordPurifying", "打开或关闭魔剑养成功能，参数：0关闭1打开")]
        public static void FeatureEnableSwordPurifying(System.Int32 enable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new FeatureEnableSwordPurifyingCommand(enable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("FeatureEnableSwordSkill", "打开或关闭魔剑技功能，参数：0关闭，1打开")]
        public static void FeatureEnableSwordSkill(System.Int32 enable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new FeatureEnableSwordSkillCommand(enable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("FlyingActorFlyTo", "让花盈飞到某空间点参数：原GameBox引擎下的一个三维坐标（X，Y，Z）")]
        public static void FlyingActorFlyTo(System.Single gameBoxXPosition, System.Single gameBoxYPosition, System.Single gameBoxZPosition)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new FlyingActorFlyToCommand(gameBoxXPosition, gameBoxYPosition, gameBoxZPosition));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("GameSwitchRenderingState", "选择当前渲染状态")]
        public static void GameSwitchRenderingState(System.Int32 state)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new GameSwitchRenderingStateCommand(state));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("GameSwitchToMainMenu", "退出游戏到主菜单")]
        public static void GameSwitchToMainMenu()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new GameSwitchToMainMenuCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("HuaYingSwitchBehaviourMode", "设置花盈的行为模式,参数：0：隐藏，1：跟随雪见，2：单飞")]
        public static void HuaYingSwitchBehaviourMode(System.Int32 mode)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new HuaYingSwitchBehaviourModeCommand(mode));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("InventoryAddItem", "增加物品，参数：物品ID，个数")]
        public static void InventoryAddItem(System.Int32 itemId, System.Int32 count)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new InventoryAddItemCommand(itemId, count));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("InventoryAddMoney", "增减金钱，参数：增减量")]
        public static void InventoryAddMoney(System.Int32 changeAmount)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new InventoryAddMoneyCommand(changeAmount));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("InventoryRemoveItem", "拿走一个物品，参数：物品ID")]
        public static void InventoryRemoveItem(System.Int32 itemId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new InventoryRemoveItemCommand(itemId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("LongKuiSwitchMode", "设置龙葵形象，参数：0蓝，1红")]
        public static void LongKuiSwitchMode(System.Int32 mode)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new LongKuiSwitchModeCommand(mode));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("MiniGamePawnshopShowNote", "当铺经营游戏显示信息，参数：信息内容")]
        public static void MiniGamePawnshopShowNote(System.String note)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new MiniGamePawnshopShowNoteCommand(note));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("MiniGameStartAppraisals", "进入签定游戏")]
        public static void MiniGameStartAppraisals()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new MiniGameStartAppraisalsCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("MiniGameStartCaveExperience", "进入山洞初体验游戏")]
        public static void MiniGameStartCaveExperience()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new MiniGameStartCaveExperienceCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("MiniGameStartEncamp", "进入宿营游戏")]
        public static void MiniGameStartEncamp(System.Int32 flag)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new MiniGameStartEncampCommand(flag));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("MiniGameStartHideFight", "使当前场景进入<当铺&刺使府夜间特殊战斗关>状态")]
        public static void MiniGameStartHideFight()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new MiniGameStartHideFightCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("MiniGameStartPawnshop", "进入当铺经营游戏，参数：当铺经营脚本ID")]
        public static void MiniGameStartPawnshop(System.Int32 scriptId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new MiniGameStartPawnshopCommand(scriptId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("MiniGameStartSailing", "进入行船游戏")]
        public static void MiniGameStartSailing(System.Int32 startSegment, System.Int32 endScriptId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new MiniGameStartSailingCommand(startSegment, endScriptId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("MiniGameStartSki", "进入滑雪游戏，参数：游戏结束后执行的脚本ID")]
        public static void MiniGameStartSki(System.Int32 endGameScriptId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new MiniGameStartSkiCommand(endGameScriptId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("MiniGameStartSwatAFly", "进入打苍蝇游戏")]
        public static void MiniGameStartSwatAFly()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new MiniGameStartSwatAFlyCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("NavigationBeeFlyTo", "控制引路蜂飞向指定位置参数：Nav层，TileMap中X坐标，TileMap中Y坐标")]
        public static void NavigationBeeFlyTo(System.Int32 navLayerIndex, System.Int32 tileXPosition, System.Int32 tileYPosition)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new NavigationBeeFlyToCommand(navLayerIndex, tileXPosition, tileYPosition));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("PlayerEnableInput", "是否允许玩家控制当前主角，参数：0不可以，1可以")]
        public static void PlayerEnableInput(System.Int32 enable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new PlayerEnableInputCommand(enable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("PlayerInteractWithObject", "与指定场景物品交互，参数：场景物品ID")]
        public static void PlayerInteractWithObject(System.Int32 sceneObjectId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new PlayerInteractWithObjectCommand(sceneObjectId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("PlayerSetActorLevel", "设置目标角色等级（所有当前角色等级的平均值+增加值），参数：角色ID，等级增加值")]
        public static void PlayerSetActorLevel(System.Int32 actorId, System.Int32 levelIncrease)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new PlayerSetActorLevelCommand(actorId, levelIncrease));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("PlayScriptMusic", "播放剧情音乐")]
        public static void PlayScriptMusic(System.String musicName, System.Int32 loop)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new PlayScriptMusicCommand(musicName, loop));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("PlaySfx", "播放音效，参数：音效名，循环次数（0表示开始无限循环，-1表示结束循环）")]
        public static void PlaySfx(System.String sfxName, System.Int32 loopCount)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new PlaySfxCommand(sfxName, loopCount));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("PlayVideo", "播放动画")]
        public static void PlayVideo(System.String name)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new PlayVideoCommand(name));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("SceneActivateObject", "设置某个物件出现或隐藏，参数：物件ID，是否出现（0隐藏，1出现）")]
        public static void SceneActivateObject(System.Int32 objectId, System.Int32 isActive)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new SceneActivateObjectCommand(objectId, isActive));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("SceneInitDivineTreeFlower", "初始化神树之花")]
        public static void SceneInitDivineTreeFlower()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new SceneInitDivineTreeFlowerCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("SceneLoad", "切换场景，参数：场景城市/关卡（文件）名称，场景名称")]
        public static void SceneLoad(System.String sceneCityName, System.String sceneName)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new SceneLoadCommand(sceneCityName, sceneName));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("SceneMoveObject", "移动场景物体到某处，参数：物件ID，原GameBox引擎下的一个三维坐标插值（X，Y，Z），动画时间")]
        public static void SceneMoveObject(System.Int32 objectId, System.Single gameBoxXOffset, System.Single gameBoxYOffset, System.Single gameBoxZOffset, System.Single duration)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new SceneMoveObjectCommand(objectId, gameBoxXOffset, gameBoxYOffset, gameBoxZOffset, duration));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("SceneObjectDoNotLoadFromSaveState", "设置某个物件出场时候的不从存档里拿状态，参数：物件ID")]
        public static void SceneObjectDoNotLoadFromSaveState(System.Int32 objectId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new SceneObjectDoNotLoadFromSaveStateCommand(objectId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("SceneOpenDoor", "播放门打开的动画")]
        public static void SceneOpenDoor(System.Int32 objectId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new SceneOpenDoorCommand(objectId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("SceneRotateWorld", "旋转整个场景，参数：原GameBox坐标系下的X轴旋转角度, Y轴旋转角度, Z轴旋转角度")]
        public static void SceneRotateWorld(System.Int32 xDegrees, System.Int32 yDegrees, System.Int32 zDegrees)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new SceneRotateWorldCommand(xDegrees, yDegrees, zDegrees));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("SceneRotateWorldInverse", "反方向旋转整个场景，参数：原GameBox坐标系下的X轴旋转角度, Y轴旋转角度, Z轴旋转角度")]
        public static void SceneRotateWorldInverse(System.Int32 xDegrees, System.Int32 yDegrees, System.Int32 zDegrees)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new SceneRotateWorldInverseCommand(xDegrees, yDegrees, zDegrees));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptEvaluateVarIfActorInTeam", "检测角色是否在队伍里并与临时变量计算结果，参数：角色ID")]
        public static void ScriptEvaluateVarIfActorInTeam(System.Int32 actorId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptEvaluateVarIfActorInTeamCommand(actorId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptEvaluateVarIfPlayerHaveItem", "检查玩家是否拥有某个物品并与临时变量计算结果，参数：该物品的数据库ID")]
        public static void ScriptEvaluateVarIfPlayerHaveItem(System.Int32 itemId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptEvaluateVarIfPlayerHaveItemCommand(itemId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptEvaluateVarIsEqualTo", "判断变量是否等于给定值并与临时变量计算结果")]
        public static void ScriptEvaluateVarIsEqualTo(System.UInt16 variable, System.Int32 value)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptEvaluateVarIsEqualToCommand(variable, value));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptEvaluateVarIsGreaterThan", "判断变量是否大于给定值并与临时变量计算结果")]
        public static void ScriptEvaluateVarIsGreaterThan(System.UInt16 variable, System.Int32 value)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptEvaluateVarIsGreaterThanCommand(variable, value));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptEvaluateVarIsGreaterThanOrEqualTo", "判断变量是否大于等于给定值并与临时变量计算结果")]
        public static void ScriptEvaluateVarIsGreaterThanOrEqualTo(System.UInt16 variable, System.Int32 value)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptEvaluateVarIsGreaterThanOrEqualToCommand(variable, value));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptEvaluateVarIsGreaterThanOrEqualToAnotherVar", "变量A的值>=变量B的值")]
        public static void ScriptEvaluateVarIsGreaterThanOrEqualToAnotherVar(System.UInt16 variableA, System.UInt16 variableB)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptEvaluateVarIsGreaterThanOrEqualToAnotherVarCommand(variableA, variableB));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptEvaluateVarIsInRange", "判断变量值是否在给定区间范围内并与临时变量计算结果")]
        public static void ScriptEvaluateVarIsInRange(System.UInt16 variable, System.Int32 min, System.Int32 max)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptEvaluateVarIsInRangeCommand(variable, min, max));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptEvaluateVarIsLessThan", "判断变量是否小于给定值并与临时变量计算结果")]
        public static void ScriptEvaluateVarIsLessThan(System.UInt16 variable, System.Int32 value)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptEvaluateVarIsLessThanCommand(variable, value));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptEvaluateVarIsLessThanOrEqualTo", "判断变量是否小于等于给定值并与临时变量计算结果")]
        public static void ScriptEvaluateVarIsLessThanOrEqualTo(System.UInt16 variable, System.Int32 value)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptEvaluateVarIsLessThanOrEqualToCommand(variable, value));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptEvaluateVarIsNotEqualTo", "判断变量是否不等于给定值并与临时变量计算结果")]
        public static void ScriptEvaluateVarIsNotEqualTo(System.UInt16 variable, System.Int32 value)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptEvaluateVarIsNotEqualToCommand(variable, value));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptExecute", "调用另一段脚本，参数：脚本ID")]
        public static void ScriptExecute(System.Int32 scriptId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptExecuteCommand(scriptId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptRunnerChangeExecutionMode", "设置脚本运行模式，参数：1为异步执行，2为同步（顺序）执行")]
        public static void ScriptRunnerChangeExecutionMode(System.Int32 mode)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptRunnerChangeExecutionModeCommand(mode));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptRunnerGoto", "使脚本跳转到指定位置，参数：脚本数据offset偏移值位置")]
        public static void ScriptRunnerGoto(System.Int32 offset)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptRunnerGotoCommand(offset));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptRunnerGotoIfNot", "如果当前计算值为true的话就继续执行下一行指令，否则使脚本跳转至Offset处运行，参数：条件判定失败时所执行的脚本数据offset偏移值位置")]
        public static void ScriptRunnerGotoIfNot(System.Int32 offset)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptRunnerGotoIfNotCommand(offset));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptRunnerSetOperator", "指定逻辑指令与标志变量的操作，参数：0：赋值/替换，1：与，2：或")]
        public static void ScriptRunnerSetOperator(System.Int32 operatorType)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptRunnerSetOperatorCommand(operatorType));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptRunnerWaitUntilTime", "脚本在一定时间后才执行下一条指令（不影响游戏系统和其它脚本的执行），参数：time（秒）")]
        public static void ScriptRunnerWaitUntilTime(System.Single time)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptRunnerWaitUntilTimeCommand(time));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptVarAddValue", "给变量增加值，Var += Value，参数：变量名（ID），值")]
        public static void ScriptVarAddValue(System.UInt16 variable, System.Int32 value)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptVarAddValueCommand(variable, value));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptVarDistractAnotherVar", "变量A减去B，如果减去后A小于零则A取反，并把结算结果重新赋值给变量A参数：变量名A，变量名B")]
        public static void ScriptVarDistractAnotherVar(System.UInt16 variableA, System.UInt16 variableB)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptVarDistractAnotherVarCommand(variableA, variableB));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptVarSetActorFavor", "取出好感值并赋值给变量，参数：用户变量，角色ID")]
        public static void ScriptVarSetActorFavor(System.UInt16 variable, System.Int32 actorId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptVarSetActorFavorCommand(variable, actorId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptVarSetAppraisalsResult", "取出鉴定小游戏的结果并设置给变量参数：用户变量，0失败，1成功")]
        public static void ScriptVarSetAppraisalsResult(System.UInt16 variable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptVarSetAppraisalsResultCommand(variable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptVarSetCombatResult", "取得战斗结果（0输1赢）并赋值给变量，参数：变量名")]
        public static void ScriptVarSetCombatResult(System.UInt16 variable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptVarSetCombatResultCommand(variable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptVarSetDialogueSelectionResult", "取得选择结果并赋值给变量，参数：变量名")]
        public static void ScriptVarSetDialogueSelectionResult(System.UInt16 variable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptVarSetDialogueSelectionResultCommand(variable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptVarSetLeastFavorableActorId", "取得主角对谁的好感最低并赋值给变量，参数：变量名")]
        public static void ScriptVarSetLeastFavorableActorId(System.UInt16 variable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptVarSetLeastFavorableActorIdCommand(variable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptVarSetLimitTimeDialogueSelectionResult", "取得限时选择结果并赋值给变量，参数：变量名")]
        public static void ScriptVarSetLimitTimeDialogueSelectionResult(System.UInt16 variable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptVarSetLimitTimeDialogueSelectionResultCommand(variable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptVarSetLongKuiDressId", "把背包里所获的的服装给龙葵，参数：服装ID变量")]
        public static void ScriptVarSetLongKuiDressId(System.UInt16 variable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptVarSetLongKuiDressIdCommand(variable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptVarSetMazeSwitchStatus", "脚本检查迷宫开关状态并赋值给变量，参数：场景名，场景开关ID，变量名")]
        public static void ScriptVarSetMazeSwitchStatus(System.String sceneName, System.Int32 objectId, System.UInt16 variable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptVarSetMazeSwitchStatusCommand(sceneName, objectId, variable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptVarSetMoney", "取出当前金钱数并赋值给变量，参数：变量名")]
        public static void ScriptVarSetMoney(System.UInt16 variable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptVarSetMoneyCommand(variable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptVarSetMostFavorableActorId", "取得主角对谁的好感最高并赋值给变量，参数：变量名")]
        public static void ScriptVarSetMostFavorableActorId(System.UInt16 variable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptVarSetMostFavorableActorIdCommand(variable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptVarSetPawnshopAccrualType", "取出当前当铺经营游戏的当前Accrual类型并赋值给变量，参数：变量名")]
        public static void ScriptVarSetPawnshopAccrualType(System.UInt16 variable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptVarSetPawnshopAccrualTypeCommand(variable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptVarSetPawnshopLevel", "取出当前当铺经营游戏的当铺等级并赋值给变量，参数：变量名")]
        public static void ScriptVarSetPawnshopLevel(System.UInt16 variable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptVarSetPawnshopLevelCommand(variable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptVarSetPawnshopManageType", "取出当前当铺经营游戏的当前Manage类型并赋值给变量，参数：变量名")]
        public static void ScriptVarSetPawnshopManageType(System.UInt16 variable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptVarSetPawnshopManageTypeCommand(variable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptVarSetPawnshopPeriodType", "取出当前当铺经营游戏的当前Period类型并赋值给变量，参数：变量名")]
        public static void ScriptVarSetPawnshopPeriodType(System.UInt16 variable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptVarSetPawnshopPeriodTypeCommand(variable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptVarSetPawnshopUnHockType", "取出当前当铺经营游戏的当前UnHock类型并赋值给变量，参数：变量名")]
        public static void ScriptVarSetPawnshopUnHockType(System.UInt16 variable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptVarSetPawnshopUnHockTypeCommand(variable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptVarSetRandomValue", "给变量随机赋值一个正整数，参数：输出变量，随机值上限（最大值但不包括）；输出0到最大值之间的一个整数")]
        public static void ScriptVarSetRandomValue(System.UInt16 variable, System.Int32 maxExclusiveValue)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptVarSetRandomValueCommand(variable, maxExclusiveValue));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptVarSetValue", "给变量赋值，Var <== Value，参数：变量名（ID），值")]
        public static void ScriptVarSetValue(System.UInt16 variable, System.Int32 value)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptVarSetValueCommand(variable, value));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("StatusSetFull", "设置主角的某项属性为满值，例如精加满，参数：角色ID，属性编号")]
        public static void StatusSetFull(System.Int32 actorId, System.Int32 statusId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new StatusSetFullCommand(actorId, statusId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("StatusSetFullToAll", "瞬间回满全队精气神")]
        public static void StatusSetFullToAll()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new StatusSetFullToAllCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("StopScriptMusic", "停止剧情音乐")]
        public static void StopScriptMusic()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new StopScriptMusicCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("TeamAddOrRemoveActor", "设置某个主角是否在队伍中出现，参数：主角ID，是否出现（1出现0不出现）")]
        public static void TeamAddOrRemoveActor(System.Int32 actorId, System.Int32 isIn)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new TeamAddOrRemoveActorCommand(actorId, isIn));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("TeamClose", "玩家队伍合并")]
        public static void TeamClose()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new TeamCloseCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("TeamCloseOnSceneChange", "出情节关时队伍合并")]
        public static void TeamCloseOnSceneChange()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new TeamCloseOnSceneChangeCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("TeamOpen", "玩家队伍散开")]
        public static void TeamOpen()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new TeamOpenCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("TeamOpenOnSceneChange", "进入情节关时队伍散开")]
        public static void TeamOpenOnSceneChange()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new TeamOpenOnSceneChangeCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("UIDisplayCaption", "显示全屏字幕（例如显示诗句等），参数：字幕序号（对应美术图片，每个字幕一个图片），列数")]
        public static void UIDisplayCaption(System.String textureName, System.Int32 numberOfLines)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UIDisplayCaptionCommand(textureName, numberOfLines));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("UIDisplayNote", "显示提示框信息")]
        public static void UIDisplayNote(System.String note)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UIDisplayNoteCommand(note));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("UIDisplayXueJianPicture", "UI展示雪见图片")]
        public static void UIDisplayXueJianPicture()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UIDisplayXueJianPictureCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("UIShowDealerMenu", "调用买卖系统，参数：商店数据文件名")]
        public static void UIShowDealerMenu(System.String dealerScriptName)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UIShowDealerMenuCommand(dealerScriptName));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("UIShowHotelMenu", "显示客栈入住菜单参数：客栈脚本文件名，可以入住脚本ID，不可以入住脚本ID，住宿脚本ID")]
        public static void UIShowHotelMenu(System.String hotelScriptName, System.Int32 canRestScriptId, System.Int32 cannotRestScriptId, System.Int32 afterRestScriptId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UIShowHotelMenuCommand(hotelScriptName, canRestScriptId, cannotRestScriptId, afterRestScriptId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("UIShowSmeltingMenu", "打开冶炼菜单")]
        public static void UIShowSmeltingMenu(System.Int32 smeltingScriptId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UIShowSmeltingMenuCommand(smeltingScriptId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("WorldMapEnableRegion", "大地图打开或关闭某个区域，参数：区域ID，0关闭，1显示但不可飞行，2显示且可以飞行")]
        public static void WorldMapEnableRegion(System.Int32 region, System.Int32 enablementFlag)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new WorldMapEnableRegionCommand(region, enablementFlag));
        }
    }
}

#endif