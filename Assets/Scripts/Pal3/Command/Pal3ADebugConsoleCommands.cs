#if PAL3A

// ---------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by DebugCommandsAutoGen`1
// </auto-generated>
// ---------------------------------------------------------------------------------------------

namespace Pal3.Command
{
    using IngameDebugConsole;
    using InternalCommands;
    using SceCommands;

    // <auto-generated/>
    public static class Pal3ADebugConsoleCommands
    {
        // <auto-generated/>
        [ConsoleMethodAttribute("ActorActivate", "设置角色是否激活，参数：角色ID，是否激活（1是0否）")]
        public static void ActorActivate(System.Int32 actorId, System.Int32 isActive)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorActivateCommand(actorId, isActive));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorAddSkill", "某个主角学会新特技，参数：主角ID，特技ID")]
        public static void ActorAddSkill(System.Int32 actorId, System.Int32 skillId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorAddSkillCommand(actorId, skillId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorAutoStand", "指定角色是否在PerformAction指令完成后自动切换成站立的动作，参数：角色ID，是否自动站立（1是0否）")]
        public static void ActorAutoStand(System.Int32 actorId, System.Int32 autoStand)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorAutoStandCommand(actorId, autoStand));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorChangeColliderSetting", "设置某个角色是否可以重叠（关闭碰撞）,参数：角色ID，是否可重叠(1可0不可)")]
        public static void ActorChangeColliderSetting(System.Int32 actorId, System.Int32 disableCollider)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorChangeColliderSettingCommand(actorId, disableCollider));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorChangeScale", "指定角色的缩放系数，参数：角色ID，缩放系数")]
        public static void ActorChangeScale(System.Int32 actorId, System.Single scale)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorChangeScaleCommand(actorId, scale));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorChangeTexture", "给角色更换纹理贴图参数：角色ID，贴图名")]
        public static void ActorChangeTexture(System.Int32 actorId, System.String textureName)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorChangeTextureCommand(actorId, textureName));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorEnablePlayerControl", "设置玩家控制哪个主角，参数：主角ID")]
        public static void ActorEnablePlayerControl(System.Int32 actorId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorEnablePlayerControlCommand(actorId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorFadeIn", "角色淡入")]
        public static void ActorFadeIn(System.Int32 actorId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorFadeInCommand(actorId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorFadeOut", "角色淡出")]
        public static void ActorFadeOut(System.Int32 actorId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorFadeOutCommand(actorId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorLearnCompose", "选择同伴学会合成术，参数：合成出的物品的数据库ID")]
        public static void ActorLearnCompose(System.Int32 objectId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorLearnComposeCommand(objectId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorLoadAction", "使角色加载一个动作，参数：角色ID，动作编号")]
        public static void ActorLoadAction(System.Int32 actorId, System.String actionName)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorLoadActionCommand(actorId, actionName));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorLookAtActor", "设定一个角色面向另一个角色（的位置），参数：被设置的角色的ID，面向的角色的ID")]
        public static void ActorLookAtActor(System.Int32 actorId, System.Int32 lookAtActorId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorLookAtActorCommand(actorId, lookAtActorId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorMoveBackwards", "角色向后平移，参数：角色ID，距离")]
        public static void ActorMoveBackwards(System.Int32 actorId, System.Single distance)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorMoveBackwardsCommand(actorId, distance));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorMoveOutOfScreen", "使角色向指定位置走,直到走出屏幕（不一定走到指定的点），参数：角色ID，TileMap中X坐标，TileMap中Z坐标，运动模式（0走，1跑）")]
        public static void ActorMoveOutOfScreen(System.Int32 actorId, System.Int32 tileX, System.Int32 tileZ, System.Int32 mode)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorMoveOutOfScreenCommand(actorId, tileX, tileZ, mode));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorMoveTo", "查找一个到TileMap上（X，Z）的路径，并使角色按此路径移动，移动中使用指定动作参数：角色ID，TileMap中X坐标，TileMap中Z坐标，动作类型（0走，1跑，2后退）")]
        public static void ActorMoveTo(System.Int32 actorId, System.Int32 tileX, System.Int32 tileZ, System.Int32 mode)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorMoveToCommand(actorId, tileX, tileZ, mode));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorPathTo", "查找一个到TileMap上（X，Z）的路径，并使角色按此路径移动，参数：角色ID，TileMap中X坐标，TileMap中Z坐标，运动模式（0走，1跑，2后退）")]
        public static void ActorPathTo(System.Int32 actorId, System.Int32 tileX, System.Int32 tileZ, System.Int32 mode)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorPathToCommand(actorId, tileX, tileZ, mode));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorPerformAction", "使角色执行一个动作，参数：角色ID，动作编号，播放次数（-1表示一直循环播放,-2表示播放一次后保持）")]
        public static void ActorPerformAction(System.Int32 actorId, System.String actionName, System.Int32 loopCount)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorPerformActionCommand(actorId, actionName, loopCount));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorPerformClimbAction", "使当前玩家操纵角色攀爬场景物品，参数：场景物品ID，向上或向下（1上0下）")]
        public static void ActorPerformClimbAction(System.Int32 objectId, System.Int32 climbUp)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorPerformClimbActionCommand(objectId, climbUp));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorRotateFacing", "转动角色面向的方向，参数：角色ID，转过多少角度（-360~360）")]
        public static void ActorRotateFacing(System.Int32 actorId, System.Int32 degrees)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorRotateFacingCommand(actorId, degrees));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorRotateFacingDirection", "转动角色的方向，参数：ID,方向（方向值为0-7）")]
        public static void ActorRotateFacingDirection(System.Int32 actorId, System.Int32 direction)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorRotateFacingDirectionCommand(actorId, direction));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorSetFacingDirection", "瞬间使角色面向的方向改变，参数：角色ID，方向（方向值为0-7）")]
        public static void ActorSetFacingDirection(System.Int32 actorId, System.Int32 direction)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorSetFacingDirectionCommand(actorId, direction));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorSetNavLayer", "设置角色所在的地层，参数：ID，层数（0或1）")]
        public static void ActorSetNavLayer(System.Int32 actorId, System.Int32 layerIndex)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorSetNavLayerCommand(actorId, layerIndex));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorSetScript", "设置角色的对话脚本，参数：角色ID，脚本ID")]
        public static void ActorSetScript(System.Int32 actorId, System.Int32 scriptId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorSetScriptCommand(actorId, scriptId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorSetTilePosition", "瞬间移动角色到TileMap中该点，参数：角色ID，TileMap中X坐标，TileMap中Z坐标")]
        public static void ActorSetTilePosition(System.Int32 actorId, System.Int32 tileXPosition, System.Int32 tileZPosition)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorSetTilePositionCommand(actorId, tileXPosition, tileZPosition));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorSetYPosition", "给角色设置Y坐标参数：角色ID，Y坐标")]
        public static void ActorSetYPosition(System.Int32 actorId, System.Single yPosition)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorSetYPositionCommand(actorId, yPosition));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorShowEmoji2", "在角色头顶出现表情符号，参数：角色ID，表情编号ID")]
        public static void ActorShowEmoji2(System.Int32 actorId, System.Int32 emojiId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorShowEmoji2Command(actorId, emojiId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorShowEmoji", "在角色头顶出现表情符号，参数：角色ID，表情编号ID")]
        public static void ActorShowEmoji(System.Int32 actorId, System.Int32 emojiId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorShowEmojiCommand(actorId, emojiId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorStopActionAndStand", "使角色结束当前行为，并站立在当前位置，参数：角色ID")]
        public static void ActorStopActionAndStand(System.Int32 actorId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorStopActionAndStandCommand(actorId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorStopAction", "ActorPerformActionCommand的循环次数为-1或-2时需要用此命令结束，参数：角色ID")]
        public static void ActorStopAction(System.Int32 actorId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorStopActionCommand(actorId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ActorWalkToUsingAction", "查找一个到TileMap上（X，Z）的路径，并使角色按此路径走动，参数：角色ID，TileMap中X坐标，TileMap中Z坐标，动作名")]
        public static void ActorWalkToUsingAction(System.Int32 actorId, System.Int32 tileX, System.Int32 tileZ, System.String action)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ActorWalkToUsingActionCommand(actorId, tileX, tileZ, action));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("BigMapEnableRegion", "大地图打开或关闭某个区域，参数：区域ID，0关闭，1显示但不可飞行，2显示且可以飞行")]
        public static void BigMapEnableRegion(System.Int32 region, System.Int32 enablementFlag)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new BigMapEnableRegionCommand(region, enablementFlag));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraFadeIn", "屏幕淡入")]
        public static void CameraFadeIn()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraFadeInCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraFadeInWhite", "屏幕淡入(白色）")]
        public static void CameraFadeInWhite()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraFadeInWhiteCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraFadeOut", "屏幕淡出")]
        public static void CameraFadeOut()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraFadeOutCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraFadeOutWhite", "屏幕淡出（白色）")]
        public static void CameraFadeOutWhite()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraFadeOutWhiteCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraFocusOnActor", "设置摄像机锁定角色，参数：角色ID")]
        public static void CameraFocusOnActor(System.Int32 actorId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraFocusOnActorCommand(actorId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraFocusOnPosition", "设置摄像机锁定一个定点，参数：LookAtX,LookAtY,LookAtZ")]
        public static void CameraFocusOnPosition(System.Single lookAtX, System.Single lookAtY, System.Single lookAtZ)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraFocusOnPositionCommand(lookAtX, lookAtY, lookAtZ));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraFocusOnSceneObject", "设置摄像机锁定场景物品，参数：物品ID")]
        public static void CameraFocusOnSceneObject(System.Int32 sceneObjectId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraFocusOnSceneObjectCommand(sceneObjectId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraFree", "取消镜头锁定")]
        public static void CameraFree(System.Int32 free)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraFreeCommand(free));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraMove", "镜头当前位置移动（保持当前角度），参数：X，Y，动作时间，插值类型，同步（1暂停当前脚本运行，0异步进行动画且继续执行脚本）")]
        public static void CameraMove(System.Single x, System.Single y, System.Single z, System.Single duration, System.Int32 mode, System.Int32 synchronous)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraMoveCommand(x, y, z, duration, mode, synchronous));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraOrbit", "镜头环绕LookAt位置旋转（LookAt点固定），参数：目标Yaw，Pitch，运动时间，插值类型（0：Linear，1：Sine）")]
        public static void CameraOrbit(System.Single yaw, System.Single pitch, System.Single duration, System.Int32 curveType)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraOrbitCommand(yaw, pitch, duration, curveType));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraOrbitHorizontal", "镜头朝向固定点左右Orbit参数：目标Yaw，Pitch，目标镜头距离，运动时间，插值类型（0：Linear，1：Sine），同步（1暂停当前脚本运行，0异步进行动画且继续执行脚本）")]
        public static void CameraOrbitHorizontal(System.Single yaw, System.Single pitch, System.Single distance, System.Single duration, System.Int32 curveType, System.Int32 synchronous)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraOrbitHorizontalCommand(yaw, pitch, distance, duration, curveType, synchronous));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraOrbitVertical", "镜头朝向固定点上下Orbit参数：目标Yaw，Pitch，目标镜头距离，运动时间，插值类型（0：Linear，1：Sine），同步（1暂停当前脚本运行，0异步进行动画且继续执行脚本）")]
        public static void CameraOrbitVertical(System.Single yaw, System.Single pitch, System.Single distance, System.Single duration, System.Int32 curveType, System.Int32 synchronous)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraOrbitVerticalCommand(yaw, pitch, distance, duration, curveType, synchronous));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraPopState", "取出镜头状态")]
        public static void CameraPopState()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraPopStateCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraPush", "镜头推动作，参数：最后from与lookAt之间的距离，动作时间，插值类型（0：Linear，1：Sine），同步（1暂停当前脚本运行，0异步进行动画且继续执行脚本）")]
        public static void CameraPush(System.Single distance, System.Single duration, System.Int32 curveType, System.Int32 synchronous)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraPushCommand(distance, duration, curveType, synchronous));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraPushState", "保存镜头状态")]
        public static void CameraPushState()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraPushStateCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraRotate", "镜头摇动（from点固定），参数：目标Yaw，Pitch，运动时间，插值类型（0：Linear，1：Sine），同步（1暂停当前脚本运行，0异步进行动画且继续执行脚本）")]
        public static void CameraRotate(System.Single yaw, System.Single pitch, System.Single duration, System.Int32 curveType, System.Int32 synchronous)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraRotateCommand(yaw, pitch, duration, curveType, synchronous));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraSetDefaultTransform", "调用默认镜头参数，参数：镜头参数ID")]
        public static void CameraSetDefaultTransform(System.Int32 option)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraSetDefaultTransformCommand(option));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraSetTransform", "设置镜头参数，参数：Yaw，Pitch，Distance，X，Y，Z")]
        public static void CameraSetTransform(System.Single yaw, System.Single pitch, System.Single distance, System.Single x, System.Single y, System.Single z)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraSetTransformCommand(yaw, pitch, distance, x, y, z));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraSetYaw", "相机设置Yaw角度")]
        public static void CameraSetYaw(System.Single yaw)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraSetYawCommand(yaw));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CameraShakeEffect", "摇晃镜头（模拟地震）效果，参数：持续时间，振幅")]
        public static void CameraShakeEffect(System.Single duration, System.Single amplitude)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CameraShakeEffectCommand(duration, amplitude));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CombatEnterBossFight", "进入Boss战")]
        public static void CombatEnterBossFight(System.Int32 monster1Id, System.Int32 monster2Id, System.Int32 monster3Id, System.Int32 monster4Id, System.Int32 monster5Id, System.Int32 monster6Id)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CombatEnterBossFightCommand(monster1Id, monster2Id, monster3Id, monster4Id, monster5Id, monster6Id));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CombatSetMaxRound", "设置战斗的最大回合数")]
        public static void CombatSetMaxRound(System.Int32 maxRound)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CombatSetMaxRoundCommand(maxRound));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CombatSetNoGameOver", "设置战斗失败不显示结束游戏")]
        public static void CombatSetNoGameOver()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CombatSetNoGameOverCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("CombatSetUnwinnable", "设置战斗为必败")]
        public static void CombatSetUnwinnable()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new CombatSetUnwinnableCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("DialogueRenderActorAvatar", "渲染人物头像立绘，参数：角色ID，头像图片编号，问或答（0头像在左，1头像在右）")]
        public static void DialogueRenderActorAvatar(System.Int32 actorId, System.String avatarTextureName, System.Int32 rightAligned)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new DialogueRenderActorAvatarCommand(actorId, avatarTextureName, rightAligned));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("DialogueRenderText", "显示对话，等待用户确定后脚本继续")]
        public static void DialogueRenderText(System.String dialogueText)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new DialogueRenderTextCommand(dialogueText));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("DialogueRenderTextWithTimeLimit", "显示对话，等待用户确定后或者时间结束时脚本继续")]
        public static void DialogueRenderTextWithTimeLimit(System.String dialogueText)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new DialogueRenderTextWithTimeLimitCommand(dialogueText));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("EffectAttachToActor", "在角色位置播放特效，参数：角色ID")]
        public static void EffectAttachToActor(System.Int32 actorId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new EffectAttachToActorCommand(actorId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("EffectPlay", "播放特效，参数：特效GroupID")]
        public static void EffectPlay(System.Int32 effectGroupId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new EffectPlayCommand(effectGroupId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("EffectPreLoad", "预加载特效Group，参数：特效GroupID")]
        public static void EffectPreLoad(System.Int32 effectGroupId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new EffectPreLoadCommand(effectGroupId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("EffectSetPosition", "设置特效位置，参数：X，Y，Z")]
        public static void EffectSetPosition(System.Single x, System.Single y, System.Single z)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new EffectSetPositionCommand(x, y, z));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("EffectSetScreenEffect", "设置全局镜头（屏幕）特效，参数：特效模式（-1清除所有特效，0水下效果，1黑白色阶）")]
        public static void EffectSetScreenEffect(System.Int32 mode)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new EffectSetScreenEffectCommand(mode));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("EffectShowSnow", "开启下雪特效，参数：0关闭，1开启")]
        public static void EffectShowSnow(System.Int32 active)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new EffectShowSnowCommand(active));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("EffectShowWaterMagic", "在玩家角色周身渲染水特效，参数：0关闭，1开启")]
        public static void EffectShowWaterMagic(System.Int32 active)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new EffectShowWaterMagicCommand(active));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("FavorAdd", "增减好感增，参数：角色ID，增减值")]
        public static void FavorAdd(System.Int32 actorId, System.Int32 changeAmount)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new FavorAddCommand(actorId, changeAmount));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("FeatureEnableJusticeBook", "打开或关闭降妖谱功能，参数：0关闭，1打开")]
        public static void FeatureEnableJusticeBook(System.Int32 enable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new FeatureEnableJusticeBookCommand(enable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("FeatureEnableSwordPurifying", "打开或关闭魔剑养成功能，参数：0关闭1打开")]
        public static void FeatureEnableSwordPurifying(System.Int32 enable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new FeatureEnableSwordPurifyingCommand(enable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("FeatureEnableSwordSkill", "打开或关闭魔剑技功能，参数：0关闭，1打开")]
        public static void FeatureEnableSwordSkill(System.Int32 enable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new FeatureEnableSwordSkillCommand(enable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("FlyingActorFlyTo", "让桃子飞到某空间点参数：X，Y，Z")]
        public static void FlyingActorFlyTo(System.Single x, System.Single y, System.Single z)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new FlyingActorFlyToCommand(x, y, z));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("GameSwitchRenderingState", "选择当前渲染状态")]
        public static void GameSwitchRenderingState(System.Int32 state)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new GameSwitchRenderingStateCommand(state));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("GameSwitchToMainMenu", "退出游戏到主菜单")]
        public static void GameSwitchToMainMenu()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new GameSwitchToMainMenuCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("HuaYingSwitchBehaviourMode", "设置花盈的行为模式,参数：0：隐藏，1：跟随雪见，2：单飞")]
        public static void HuaYingSwitchBehaviourMode(System.Int32 mode)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new HuaYingSwitchBehaviourModeCommand(mode));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("InventoryAddItem", "增加物品，参数：物品ID，个数")]
        public static void InventoryAddItem(System.Int32 itemId, System.Int32 count)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new InventoryAddItemCommand(itemId, count));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("InventoryAddMoney", "增减金钱，参数：增减量")]
        public static void InventoryAddMoney(System.Int32 changeAmount)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new InventoryAddMoneyCommand(changeAmount));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("InventoryRemoveItem", "拿走物品，参数：物品ID，个数")]
        public static void InventoryRemoveItem(System.Int32 itemId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new InventoryRemoveItemCommand(itemId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("LongKuiGetCloth", "把背包里所获的的服装给龙葵，参数：服装ID变量")]
        public static void LongKuiGetCloth(System.UInt16 variable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new LongKuiGetClothCommand(variable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("LongKuiSwitchMode", "设置龙葵形象，参数：0人，1鬼")]
        public static void LongKuiSwitchMode(System.Int32 mode)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new LongKuiSwitchModeCommand(mode));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("MiniGameGetAppraisalsResult", "取出鉴定小游戏的结果并设置给变量参数：用户变量，0失败，1成功")]
        public static void MiniGameGetAppraisalsResult(System.Int32 variable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new MiniGameGetAppraisalsResultCommand(variable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("MiniGameStartAppraisals", "进入签定游戏")]
        public static void MiniGameStartAppraisals()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new MiniGameStartAppraisalsCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("MiniGameStartEncamp", "进入宿营游戏")]
        public static void MiniGameStartEncamp(System.Int32 flag)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new MiniGameStartEncampCommand(flag));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("MiniGameStartHideFight", "使当前场景进入<当铺&刺使府夜间特殊战斗关>状态")]
        public static void MiniGameStartHideFight()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new MiniGameStartHideFightCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("MiniGameStartPawnshop", "进入当铺经营游戏，参数：当铺经营脚本ID")]
        public static void MiniGameStartPawnshop(System.Int32 scriptId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new MiniGameStartPawnshopCommand(scriptId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("MiniGameStartSailing", "进入行船游戏")]
        public static void MiniGameStartSailing(System.Int32 startSegment, System.Int32 endScriptId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new MiniGameStartSailingCommand(startSegment, endScriptId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("MiniGameStartSki", "进入滑雪游戏，参数：游戏结束后执行的脚本ID")]
        public static void MiniGameStartSki(System.Int32 endGameScriptId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new MiniGameStartSkiCommand(endGameScriptId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("PlayerEnableInput", "是否允许玩家控制当前主角，参数：0不可以，1可以")]
        public static void PlayerEnableInput(System.Int32 enable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new PlayerEnableInputCommand(enable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("PlayerInteractWithObject", "与指定场景物品交互，参数：场景物品ID")]
        public static void PlayerInteractWithObject(System.Int32 sceneObjectId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new PlayerInteractWithObjectCommand(sceneObjectId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("PlayerSetActorLevel", "设置目标角色等级（所有当前角色等级的平均值+增加值），参数：角色ID，等级增加值")]
        public static void PlayerSetActorLevel(System.Int32 actorId, System.Int32 unknown1, System.Int32 unknown2, System.Int32 levelIncrease)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new PlayerSetActorLevelCommand(actorId, unknown1, unknown2, levelIncrease));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("PlayMusic", "播放剧情音乐")]
        public static void PlayMusic(System.String musicName, System.Int32 loop)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new PlayMusicCommand(musicName, loop));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("PlaySfx", "播放音效，参数：音效名，循环次数")]
        public static void PlaySfx(System.String sfxName, System.Int32 loopCount)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new PlaySfxCommand(sfxName, loopCount));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("PlayVideo", "播放动画")]
        public static void PlayVideo(System.String name)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new PlayVideoCommand(name));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("SceneActivateObject", "设置某个物件出现或隐藏，参数：物件ID，是否出现（0隐藏，1出现）")]
        public static void SceneActivateObject(System.Int32 objectId, System.Int32 isActive)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new SceneActivateObjectCommand(objectId, isActive));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("SceneInitDivineTreeFlower", "初始化神树之花")]
        public static void SceneInitDivineTreeFlower()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new SceneInitDivineTreeFlowerCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("SceneLoad", "切换场景，参数：场景关（文件）名称，场景区块名称")]
        public static void SceneLoad(System.String sceneFileName, System.String sceneName)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new SceneLoadCommand(sceneFileName, sceneName));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("SceneMoveObject", "移动场景物体到某处，参数：物件ID，XOffset，YOffset，ZOffset，动画时间")]
        public static void SceneMoveObject(System.Int32 objectId, System.Single xOffset, System.Single yOffset, System.Single zOffset, System.Single duration)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new SceneMoveObjectCommand(objectId, xOffset, yOffset, zOffset, duration));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("SceneObjectDoNotLoadFromSaveState", "设置某个物件出场时候的不从存档里拿状态，参数：物件ID")]
        public static void SceneObjectDoNotLoadFromSaveState(System.Int32 objectId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new SceneObjectDoNotLoadFromSaveStateCommand(objectId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("SceneOpenDoor", "播放门打开的动画")]
        public static void SceneOpenDoor(System.Int32 objectId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new SceneOpenDoorCommand(objectId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("SceneRotateWorld", "旋转整个场景，参数：X，Y，Z")]
        public static void SceneRotateWorld(System.Int32 unknown1, System.Int32 unknown2, System.Int32 x, System.Int32 y, System.Int32 z)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new SceneRotateWorldCommand(unknown1, unknown2, x, y, z));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("SceneRotateWorldInverse", "反方向旋转整个场景，参数：X，Y，Z")]
        public static void SceneRotateWorldInverse(System.Int32 x, System.Int32 y, System.Int32 z)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new SceneRotateWorldInverseCommand(x, y, z));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptChangeExecutionMode", "设置脚本运行模式，参数：1为单步运行，2为连续执行")]
        public static void ScriptChangeExecutionMode(System.Int32 mode)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptChangeExecutionModeCommand(mode));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptCheckIfActorInTeam", "检测角色是否在队伍里并设置给变量，参数：角色ID")]
        public static void ScriptCheckIfActorInTeam(System.Int32 actorId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptCheckIfActorInTeamCommand(actorId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptCheckIfPlayerHaveItem", "检查玩家是否拥有某个物品，参数：该物品的数据库ID，此命令结果影响标志变量（类似VarEqualTo）")]
        public static void ScriptCheckIfPlayerHaveItem(System.Int32 itemId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptCheckIfPlayerHaveItemCommand(itemId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptGetDialogueSelection", "取得选择结果并赋值给变量，参数：变量名")]
        public static void ScriptGetDialogueSelection(System.Int32 variable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptGetDialogueSelectionCommand(variable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptGetFavor", "取出好感值，参数：用户变量，角色ID")]
        public static void ScriptGetFavor(System.Int32 variable, System.Int32 actorId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptGetFavorCommand(variable, actorId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptGetLimitTimeDialogueSelection", "取得限时选择结果并赋值给变量，参数：变量名")]
        public static void ScriptGetLimitTimeDialogueSelection(System.Int32 variable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptGetLimitTimeDialogueSelectionCommand(variable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptGetMazeSwitchStatus", "脚本检查迷宫开关状态并赋值给变量，参数：场景名，场景开关ID，变量名")]
        public static void ScriptGetMazeSwitchStatus(System.String sceneName, System.Int32 objectId, System.UInt16 variable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptGetMazeSwitchStatusCommand(sceneName, objectId, variable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptGetMoney", "取出当前金钱数并赋值给变量，参数：变量名")]
        public static void ScriptGetMoney(System.Int32 variable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptGetMoneyCommand(variable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptGetPawnshopAccrualType", "取出当前当铺经营游戏的当前Accrual类型并赋值给变量，参数：变量名")]
        public static void ScriptGetPawnshopAccrualType(System.Int32 variable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptGetPawnshopAccrualTypeCommand(variable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptGetPawnshopLevel", "取出当前当铺经营游戏的当铺等级并赋值给变量，参数：变量名")]
        public static void ScriptGetPawnshopLevel(System.Int32 variable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptGetPawnshopLevelCommand(variable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptGetPawnshopManageType", "取出当前当铺经营游戏的当前Manage类型并赋值给变量，参数：变量名")]
        public static void ScriptGetPawnshopManageType(System.Int32 variable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptGetPawnshopManageTypeCommand(variable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptGetPawnshopPeriodType", "取出当前当铺经营游戏的当前Period类型并赋值给变量，参数：变量名")]
        public static void ScriptGetPawnshopPeriodType(System.Int32 variable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptGetPawnshopPeriodTypeCommand(variable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptGetPawnshopUnHockType", "取出当前当铺经营游戏的当前UnHock类型并赋值给变量，参数：变量名")]
        public static void ScriptGetPawnshopUnHockType(System.Int32 variable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptGetPawnshopUnHockTypeCommand(variable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptGoto", "使脚本跳转到指定位置，参数：标号")]
        public static void ScriptGoto(System.Int32 offset)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptGotoCommand(offset));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptRun", "调用另一段脚本，参数：脚本ID")]
        public static void ScriptRun(System.Int32 scriptId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptRunCommand(scriptId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptSetOperator", "指定逻辑指令对与标志变量的操作，参数：0：替换，1：与，2：或")]
        public static void ScriptSetOperator(System.Int32 operatorType)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptSetOperatorCommand(operatorType));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptTestGoto", "如果当前计算值为false的话就使脚本跳转至Offset处运行，参数：当前运行脚本的offset")]
        public static void ScriptTestGoto(System.Int32 offset)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptTestGotoCommand(offset));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptVarDistractValue", "变量A减去B，如果减去后A小于零则A取反，参数：变量名A，变量名B")]
        public static void ScriptVarDistractValue(System.Int32 variableA, System.Int32 variableB)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptVarDistractValueCommand(variableA, variableB));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptVarEqualTo", "A==B? A Equal to B?")]
        public static void ScriptVarEqualTo(System.Int32 variable, System.Int32 value)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptVarEqualToCommand(variable, value));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptVarGetCombatResult", "取得战斗结果（0输1赢）并赋值给变量，参数：变量名")]
        public static void ScriptVarGetCombatResult(System.Int32 variable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptVarGetCombatResultCommand(variable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptVarGreaterThan", "A>B?, A Greater than B?")]
        public static void ScriptVarGreaterThan(System.Int32 variable, System.Int32 value)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptVarGreaterThanCommand(variable, value));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptVarGreaterThanOrEqualTo", "A>=B? A Greater or Equal B?")]
        public static void ScriptVarGreaterThanOrEqualTo(System.Int32 variable, System.Int32 value)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptVarGreaterThanOrEqualToCommand(variable, value));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptCompareUserVarGreaterThanOrEqualTo", "A>=B? A Greater or Equal B?")]
        public static void ScriptCompareUserVarGreaterThanOrEqualTo(System.Int32 variableA, System.Int32 variableB)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptCompareUserVarGreaterThanOrEqualToCommand(variableA, variableB));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptVarInBetween", "判断变量是否在两个数之间并赋值给临时变量，参数：变量名，min，max，说明：X>=min并且X<=max?")]
        public static void ScriptVarInBetween(System.Int32 variable, System.Int32 min, System.Int32 max)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptVarInBetweenCommand(variable, min, max));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptVarLessThan", "A<B?, A Less than B?")]
        public static void ScriptVarLessThan(System.Int32 variable, System.Int32 value)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptVarLessThanCommand(variable, value));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptVarLessThanOrEqualTo", "A<=B? A Less than or Equal B?")]
        public static void ScriptVarLessThanOrEqualTo(System.Int32 variable, System.Int32 value)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptVarLessThanOrEqualToCommand(variable, value));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptVarNotEqualTo", "A!=B? A NOT Equal B?")]
        public static void ScriptVarNotEqualTo(System.Int32 variable, System.Int32 value)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptVarNotEqualToCommand(variable, value));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptVarSetLeastFavorableActorId", "取得主角对谁的好感最低，参数：变量名")]
        public static void ScriptVarSetLeastFavorableActorId(System.Int32 variable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptVarSetLeastFavorableActorIdCommand(variable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptVarSetMostFavorableActorId", "取得主角对谁的好感最高，参数：变量名")]
        public static void ScriptVarSetMostFavorableActorId(System.Int32 variable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptVarSetMostFavorableActorIdCommand(variable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptVarSetRandomValue", "给变量随机赋值一个正整数，参数：输出变量，随机值上限（最大值）；输出0到最大值之间的一个整数")]
        public static void ScriptVarSetRandomValue(System.Int32 variable, System.Int32 maxValue)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptVarSetRandomValueCommand(variable, maxValue));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptVarSetValue", "给变量赋值，Var <== Value，参数：变量名（ID），值")]
        public static void ScriptVarSetValue(System.Int32 variable, System.Int32 value)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptVarSetValueCommand(variable, value));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ScriptWaitUntilTime", "脚本在一定时间后才执行下一条指令（不影响游戏系统和其它脚本的执行），参数：time（秒）")]
        public static void ScriptWaitUntilTime(System.Single time)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ScriptWaitUntilTimeCommand(time));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("StatusSetFull", "设置主角的某项属性为满值，例如精加满，参数：角色ID，属性编号")]
        public static void StatusSetFull(System.Int32 actorId, System.Int32 statusId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new StatusSetFullCommand(actorId, statusId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("StatusSetFullToAll", "瞬间回满全队精气神")]
        public static void StatusSetFullToAll()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new StatusSetFullToAllCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("StopMusic", "停止剧情音乐")]
        public static void StopMusic()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new StopMusicCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("TeamAddOrRemoveActor", "设置某个主角是否在队伍中出现，参数：主角ID，是否出现（1出现0不出现）")]
        public static void TeamAddOrRemoveActor(System.Int32 actorId, System.Int32 isIn)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new TeamAddOrRemoveActorCommand(actorId, isIn));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("TeamClose", "玩家队伍合并")]
        public static void TeamClose()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new TeamCloseCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("TeamCloseOnSceneChange", "出情节关时队伍合并")]
        public static void TeamCloseOnSceneChange()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new TeamCloseOnSceneChangeCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("TeamOpen", "玩家队伍散开")]
        public static void TeamOpen()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new TeamOpenCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("TeamOpenOnSceneChange", "进入情节关时队伍散开")]
        public static void TeamOpenOnSceneChange()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new TeamOpenOnSceneChangeCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("UIDisplayCaption", "显示全屏字幕（例如显示诗句等），参数：字幕序号（对应美术图片，每个字幕一个图片），列数，是否还有下一行")]
        public static void UIDisplayCaption(System.String textureName, System.Int32 numberOfLines, System.Int32 hasNextRow)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UIDisplayCaptionCommand(textureName, numberOfLines, hasNextRow));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("UIDisplayNextCaption", "显示全屏字幕（例如显示诗句等），参数：字幕序号（对应美术图片，每个字幕一个图片），列数")]
        public static void UIDisplayNextCaption(System.String textureName, System.Int32 numberOfLines)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UIDisplayNextCaptionCommand(textureName, numberOfLines));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("UIDisplayNote", "显示提示框信息")]
        public static void UIDisplayNote(System.String note)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UIDisplayNoteCommand(note));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("UIDisplayXueJianPicture", "UI展示雪见图片")]
        public static void UIDisplayXueJianPicture()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UIDisplayXueJianPictureCommand());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("UIShowDealerMenu", "调用买卖系统，参数：商店数据文件名")]
        public static void UIShowDealerMenu(System.String dealerScriptName)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UIShowDealerMenuCommand(dealerScriptName));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("UIShowHotelMenu", "显示客栈入住菜单参数：客栈脚本文件名，可以入住脚本ID，不可以入住脚本ID，住宿脚本ID")]
        public static void UIShowHotelMenu(System.String hotelScriptName, System.Int32 canRestScriptId, System.Int32 cannotRestScriptId, System.Int32 afterRestScriptId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UIShowHotelMenuCommand(hotelScriptName, canRestScriptId, cannotRestScriptId, afterRestScriptId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("UIShowSmeltingMenu", "打开冶炼菜单")]
        public static void UIShowSmeltingMenu(System.Int32 smeltingScriptId)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UIShowSmeltingMenuCommand(smeltingScriptId));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("Unknown160", "PAL3A捉鬼游戏")]
        public static void Unknown160()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UnknownCommand160());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("Unknown162", "???")]
        public static void Unknown162(System.Single unknown1, System.Single unknown2, System.Single unknown3, System.Single unknown4, System.Single unknown5, System.Single unknown6, System.Single unknown7)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UnknownCommand162(unknown1, unknown2, unknown3, unknown4, unknown5, unknown6, unknown7));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("Unknown163", "???")]
        public static void Unknown163(System.String sceneName, System.Int32 objectId, System.Int32 enable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UnknownCommand163(sceneName, objectId, enable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("Unknown164", "控制雷元戈头上的鸟的显示，风雅颂???")]
        public static void Unknown164(System.Int32 unknown1, System.Int32 unknown2)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UnknownCommand164(unknown1, unknown2));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("Unknown166", "???")]
        public static void Unknown166(System.Int32 unknown1, System.Int32 unknown2)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UnknownCommand166(unknown1, unknown2));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("Unknown167", "雷电特效???")]
        public static void Unknown167(System.String unknown1, System.Int32 unknown2, System.Single unknown3, System.Single unknown4, System.Single unknown5, System.Single unknown6, System.Single unknown7, System.Single unknown8)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UnknownCommand167(unknown1, unknown2, unknown3, unknown4, unknown5, unknown6, unknown7, unknown8));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("Unknown169", "???")]
        public static void Unknown169(System.String unknown)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UnknownCommand169(unknown));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("Unknown170", "???")]
        public static void Unknown170(System.String unknown)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UnknownCommand170(unknown));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("Unknown176", "???")]
        public static void Unknown176(System.Int32 unknown1, System.Int32 unknown2, System.Int32 unknown3)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UnknownCommand176(unknown1, unknown2, unknown3));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("Unknown177", "王蓬絮开启朱仙变???")]
        public static void Unknown177(System.Int32 enable)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UnknownCommand177(enable));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("Unknown181", "???")]
        public static void Unknown181(System.Single unknown1, System.Single unknown2, System.Single unknown3, System.Single unknown4)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UnknownCommand181(unknown1, unknown2, unknown3, unknown4));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("Unknown182", "???")]
        public static void Unknown182(System.String unknown)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UnknownCommand182(unknown));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("Unknown184", "更改角色透明度???")]
        public static void Unknown184(System.Int32 actorId, System.Single transparency)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UnknownCommand184(actorId, transparency));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("Unknown185", "PAL3A算命UI???")]
        public static void Unknown185(System.Int32 unknown1, System.Int32 unknown2, System.Int32 unknown3, System.Int32 unknown4, System.Int32 unknown5, System.Int32 unknown6, System.Int32 unknown7, System.Int32 unknown8)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UnknownCommand185(unknown1, unknown2, unknown3, unknown4, unknown5, unknown6, unknown7, unknown8));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("Unknown187", "播放开门动画？参数为门的ID")]
        public static void Unknown187(System.Int32 unknown)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UnknownCommand187(unknown));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("Unknown192", "南宫煌以变身状态下进入Boss战斗？")]
        public static void Unknown192(System.Int32 monster1Id, System.Int32 monster2Id, System.Int32 monster3Id, System.Int32 monster4Id, System.Int32 monster5Id, System.Int32 monster6Id, System.String combatMusic, System.Int32 unknown)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UnknownCommand192(monster1Id, monster2Id, monster3Id, monster4Id, monster5Id, monster6Id, combatMusic, unknown));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("Unknown193", "???")]
        public static void Unknown193(System.Int32 unknown1, System.Int32 unknown2)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UnknownCommand193(unknown1, unknown2));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("Unknown194", "PAL3游戏结束的最后一个指令，目测是播放制作人信息???")]
        public static void Unknown194()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UnknownCommand194());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("Unknown195", "进入Boss战斗？")]
        public static void Unknown195(System.Int32 monster1Id, System.Int32 monster2Id, System.Int32 monster3Id, System.Int32 monster4Id, System.Int32 monster5Id, System.Int32 monster6Id, System.String combatMusic)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UnknownCommand195(monster1Id, monster2Id, monster3Id, monster4Id, monster5Id, monster6Id, combatMusic));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("Unknown196", "???")]
        public static void Unknown196()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UnknownCommand196());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("Unknown197", "???")]
        public static void Unknown197(System.Int32 unknown1, System.Int32 unknown2)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UnknownCommand197(unknown1, unknown2));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("Unknown198", "???")]
        public static void Unknown198(System.Int32 unknown1, System.Int32 unknown2)
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UnknownCommand198(unknown1, unknown2));
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("Unknown199", "???")]
        public static void Unknown199()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UnknownCommand199());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("Unknown200", "???")]
        public static void Unknown200()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UnknownCommand200());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("Unknown216", "???")]
        public static void Unknown216()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new UnknownCommand216());
        }

        // <auto-generated/>
        [ConsoleMethodAttribute("ResetGameState", "Execute ResetGameStateCommand.")]
        public static void ResetGameState()
        {
            CommandDispatcher<ICommand>.Instance.Dispatch(
                new ResetGameStateCommand());
        }
    }
}

#endif